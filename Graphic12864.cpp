#include "Graphic12864.h"
#include "Arduino.h"
#include "gcode.h"
#include <string.h>
#include <U8g2lib.h>
#include "utils.h"
#include <SD.h>
#include <SPI.h>

#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif

#include <RotaryEncoder.h>

#define ENCODER_PINA     33   // If the encoder moved in the wrong direction, swap PINA and PINB
#define ENCODER_PINB     31
#define ENCODER_BTN      35

utils tools_graphics;
File gcode_file;
File root;
bool sd_ok;
int seperator_index = 0;
int seperator_pos = 0;
String final_file;

String sd_list_str;
char sd_list_char[255];
char sd_print_file[8];

volatile char sd_ch;
volatile uint8_t sd_packetBuffer[22];
volatile uint8_t sd_packetBufferInd;

RotaryEncoder encoder(ENCODER_PINA, ENCODER_PINB, RotaryEncoder::LatchMode::TWO03);

// extern "C" {
// #include <wiring.h> 
// #include <inttypes.h>
// #include <avr/pgmspace.h>
// }

gcode gcode_read_sd;

U8G2_ST7920_128X64_F_SW_SPI u8g2(U8G2_R0, /* clock=*/ 23 /* A4 */ , /* data=*/ 17 /* A2 */, /* CS=*/ 16 /* A3 */, /* reset=*/ U8X8_PIN_NONE);
uint8_t draw_state = 1;
uint8_t selection_main = 0;
uint8_t selection_control_device = 0;
uint8_t selection_sd = 0;


uint8_t inputVal;
int retValX = 0;

#define logo_width 128
#define logo_height 43
static const unsigned char logo[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7A, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xC0, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xC3, 0x07, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xEF, 
  0xE3, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xF8, 0xFD, 0xE1, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xF8, 0xF7, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x7E, 
  0xFC, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xFC, 0x3F, 0xFE, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x1F, 0x7F, 0xFF, 0x03, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x8F, 
  0xFF, 0xED, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xFE, 0xC7, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xE3, 0xBB, 0xDF, 0x0F, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xF3, 
  0xFF, 0xEF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xEC, 0xF8, 0xDF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x04, 0x21, 0xF3, 0xF9, 0x3F, 0x00, 0xFC, 0xE0, 0xED, 0x7F, 0x0D, 0x9F, 
  0xF8, 0x08, 0xDD, 0x20, 0xE6, 0xA1, 0xF3, 0xFF, 0xFE, 0x39, 0x3C, 0x80, 
  0xFF, 0xFD, 0x0F, 0xFF, 0xF8, 0xDD, 0xFF, 0x31, 0x7E, 0xA1, 0xF7, 0x63, 
  0xFE, 0x1F, 0xFC, 0x01, 0xFE, 0xFF, 0x0F, 0xE4, 0xF9, 0xBC, 0xFF, 0x7B, 
  0x1E, 0xF1, 0xD6, 0x23, 0xD6, 0x07, 0xBC, 0x03, 0xFE, 0xFE, 0x07, 0x6C, 
  0xFB, 0xB5, 0xEF, 0x3B, 0x76, 0xFF, 0x94, 0x21, 0x8E, 0x1D, 0x78, 0x0F, 
  0x7C, 0x9F, 0x07, 0x24, 0xD3, 0xE7, 0xEC, 0x3E, 0xC6, 0x5F, 0x3C, 0x23, 
  0xFE, 0x31, 0xF8, 0x1F, 0xF8, 0xFF, 0x07, 0x36, 0xFE, 0xC3, 0xD9, 0x26, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x1F, 0xF8, 0xFF, 0x03, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3B, 
  0xF0, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xB0, 0x7B, 0xE0, 0xDB, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x7F, 0xC0, 0xFF, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 
  0x80, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xE0, 0xEF, 0x81, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFE, 0x01, 0x3E, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 
  0x03, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 
  0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xBC, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00
};

const char *string_list_main = 
  "Main Screen\n"
  "Control Device\n"
  "Device Info\n"
  "Print from SD"
  ;

const char *string_list_control = 
  "Back to main\n"
  "Home\n"
  "X\n"
  "Y\n"
  ;


Graphic12864::Graphic12864() {
}

void Graphic12864::delayns(){   

}

void Graphic12864::Initialize() {
  u8g2.begin(/* menu_select_pin= */ 35, /* menu_next_pin= */ 33, /* menu_prev_pin= */ 31, /* menu_home_pin= */ 8);
  u8g2.clearBuffer();
  u8g2.drawXBMP( 0, 0, logo_width, logo_height, logo);
  u8g2.sendBuffer();
  delay(1000);
  u8g2.setFont(u8g2_font_6x12_tr);

  Serial.println("Initializing SD card...");
  if (!SD.begin(SD_CARD_CS)) {
    Serial.println("initialization failed!");
    sd_ok = false;
  } else {
    Serial.println("Initialization done.");
    sd_ok = true;
    root = SD.open("/");
    printDirectory(root, 0);
  }
}

void Graphic12864::draw() {
  u8g2.clearBuffer();

  switch(draw_state) {
    case 0:
    break;

    case 1:
      // Main Menu
      selection_main = u8g2.userInterfaceSelectionList(
      "KUARINO",
      selection_main, 
      string_list_main);
      draw_state = selection_main;
      break;
    
    case 2:
      // Control Device
      selection_control_device = u8g2.userInterfaceSelectionList(
      "Control Device",
      selection_control_device, 
      string_list_control);
      switch (selection_control_device)
      {
        // Back To Main
        case 1:
          draw_state = 1;
          break;
        // Home
        case 2:
          gcode_read_sd.g_control("G28", "", "");
          break;
        // X
        case 3:
          draw_state = 10;
          break;
        // Y
        case 4:
          draw_state = 11;
          break;
        default:
          break;
      }
      break;

    case 4:
      if(sd_ok){
        
        selection_sd = u8g2.userInterfaceSelectionList(
        "Select For Print",
        selection_sd, 
        sd_list_char);

        for (int i = 0; i < 8; i++)
        {
          sd_print_file[i] = 0;
        }

        for (int i = 0; i < 255; i++)
        {
          if (sd_list_char != 0)
          {
            if (sd_list_char[i] == 10)
            {
              seperator_pos += 1;
              if (seperator_pos == selection_sd)
              {
                for (int j = 0; j < (i - seperator_index); j++)
                {
                  sd_print_file[j] = sd_list_char[seperator_index + j];
                }
              }
              seperator_index = i;
            }
          }
        }
        seperator_index = 0;
        seperator_pos = 0;
        Serial.print("This File will be printed: ");
        Serial.println(sd_print_file);
        print_from_sd_card(sd_print_file);
      }
      break;

    case 10:
      inputVal = 0;
      retValX = u8g2.userInterfaceInputValue("X Axis Movement", "mm = ", &inputVal, 0, 200, 3, " ");
      if(retValX == 1){
        gcode_read_sd.g_control(" G1 X 500", inputVal);
        draw_state = 2;
        retValX = 0;
      }
      break;
    case 11:
      break;

    default:
      u8g2.drawStr(0,10,"No State");
  }
  u8g2.sendBuffer();
}

void Graphic12864::printDirectory(File dir, int numTabs) {
  
  int file_name_length = 0;
  int file_name_index = 0;

  for (int i = 0; i < 255; i++)
  {
    sd_list_char[i] = 0;
  }

  while (true) {
    File entry =  dir.openNextFile();
    if (!entry) {
      break;
    }

    for (uint8_t i = 0; i < numTabs; i++) {
      Serial.print('\t');
    }

    if (entry.isDirectory()) {
      Serial.println("/");
    } else {
      file_name_length = strlen(entry.name());
      for (int j = 0; j < file_name_length; j++)
      {
        sd_list_char[file_name_index] = entry.name()[j];
        file_name_index += 1;
      }
      sd_list_char[file_name_index] = '\n';
      file_name_index += 1;
      Serial.println(sd_list_char);

    }
    entry.close();
  }
}

void Graphic12864::print_from_sd_card(const char* print_file){
  sd_packetBufferInd = 0;
  Serial.print("Print File: ");
  Serial.println(print_file);
  gcode_file = SD.open("123.txt");
  for(int i=0;i<22;i++)
  {
    sd_packetBuffer[i] = 0;
  }
  if(gcode_file){
    while (gcode_file.available()) {
      sd_ch = gcode_file.read();
      Serial.print("CH:");
      Serial.print(sd_ch);
      Serial.print("\t");
      Serial.print("DEC: ");
      Serial.println(sd_ch, DEC);
      sd_packetBuffer[sd_packetBufferInd] = sd_ch;
      sd_packetBufferInd = sd_packetBufferInd + 1;
      if (sd_ch == 10)
      {
        gcode_read_sd.g_control(sd_packetBuffer);
        Serial.println("------");
        sd_packetBufferInd = 0;
        uint8_t i = 0;
        for(i=0;i<22;i++)
        {
          sd_packetBuffer[i] = 0;
        }
      }
    }
    Serial.println(gcode_file.available());
    // gcode_file.close();
    Serial.println("Here");

  }
  else{
    Serial.println("Error Opening File");
    draw_state = 1;
  }
}
